// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // Decoding the instruction

        Not(x=instruction[15],out=aInst);

        And(x=instruction[15],y=instruction[14],out=inst15ANDinst14);

        And(x=instruction[13],y=inst15ANDinst14,out=cInst);
        And(x=instruction[12],y=cInst,out=scrM);
        And(x=instruction[11],y=cInst,out=aluZX);
        And(x=instruction[10],y=cInst,out=aluNX);
        And(x=instruction[9],y=cInst,out=aluZY);
        And(x=instruction[8],y=cInst,out=aluNY);
        And(x=instruction[7],y=cInst,out=aluF);
        And(x=instruction[6],y=cInst,out=aluNO);
        And(x=instruction[5],y=cInst,out=destA);
        And(x=instruction[4],y=cInst,out=destD);
        And(x=instruction[3],y=cInst,out=destM,out=writeM);
        And(x=instruction[2],y=cInst,out=jmpLT);
        And(x=instruction[1],y=cInst,out=jmpEQ);
        And(x=instruction[0],y=cInst,out=jmpGT);


        // Mux which takes in the instruction and the ALUOUTPUT

        Mux16(x=instruction,y=aluOUT,sel=destA,out=firstMuxOut);

        Or(x=aInst, y=destA, out=loadA);
        ARegister(in=firstMuxOut,load=loadA,out=aRegisterOut,out[0..14]=addressM);

        Mux16(x=aRegisterOut,y=inM,sel=scrM,out=secondMuxOut);

        // Feed that right in the ALU boi



        ALU(x=dRegisterOut,y=secondMuxOut,zx=aluZX,nx=aluNX,zy=aluZY,ny=aluNY,f=aluF,no=aluNO,out=aluOUT,out=outM,zr=outZR,ng=outNG);


        // D Register Part

        DRegister(in=aluOUT, load=destD, out=dRegisterOut);


        // Program Counter Part



        PC(x=aRegisterOut,load=loadPC,inc=incramentPC,reset=reset,out[0..14]=pc);


        // Next Circuit that does the jumping part

        Or(x=outZR,y=outNG,out=outzrORoutng);
        Not(x=outzrORoutng,out=aluPOS);

        And(x=outNG,y=jmpLT,out=jLT);
        And(x=outZR,y=jmpEQ,out=jEQ);
        And(x=aluPOS,y=jmpGT,out=jGT);

        Or(x=jLT,y=jEQ,out=jltORjeq);

        Or(x=jGT,y=jltORjeq,out=jMP);

        And(x=cInst,y=jMP,out=loadPC);

        Not(x=loadPC,out=incramentPC);


}
