// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson


/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

 CHIP ALU {
     IN x[16], y[16], zx, nx, zy, ny, f, no;
     OUT out[16], zr, ng;

     PARTS:

       // Pre processing on X
       Mux16(x=x,y=false,sel=zx,out=preprocessingX);
       Not16(x=preprocessingX,out=NOTpreprocessingX);
       Mux16(x=preprocessingX,y=NOTpreprocessingX,sel=nx,out=FINALX);

       // Pre processing on Y
       Mux16(x=y,y=false,sel=zy,out=preprocessingY);
       Not16(x=preprocessingY,out=NOTpreprocessingY);
       Mux16(x=preprocessingY,y=NOTpreprocessingY,sel=ny,out=FINALY);

       // f bit

       And16(x=FINALX,y=FINALY,out=XandY);
       Add16(x=FINALX,y=FINALY,out=XaddY);
       Mux16(x=XandY,y=XaddY,sel=f,out=fBitOutput);

       // post processing
       Not16(x=fBitOutput,out=NOTfBitOutput);
       Mux16(x=fBitOutput,y=NOTfBitOutput,sel=no,out=out,out[0..7]=firsthalfOut,out[8..15]=secondHalfOut, out[15]=ng);

       // Flags

       Or8Way(x=firsthalfOut,out=orOut1);
       Or8Way(x=secondHalfOut,out=orOut2);
       Or(x=orOut1,y=orOut2,out=andOut);
       Not(x=andOut,out=zr);




 }
